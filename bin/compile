#!/usr/bin/env bash
# https://devcenter.heroku.com/articles/buildpack-api#bin-compile

# TODO: Use node buildpack and just make this super simple
### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

echo "started @ $(date -u)"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)
readonly start_time="$(date +%s)"

### Load the standard lib

STDLIB_FILE=$(mktemp -t stdlib.XXXXX)
curl --silent --retry 5 --retry-max-time 15 'https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh' > "$STDLIB_FILE"
source "$STDLIB_FILE"

### Helper functions

fail() {
    echo "${1}" 1>&2
    exit 1
}

### Load env vars

export_env "$ENV_DIR"

### Install aws cli
puts_step 'install aws cli'
if [ ! -d "$CACHE_DIR/awscli/awscli-bundle" ]; then
    mkdir -p "$CACHE_DIR/awscli"
    curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "$CACHE_DIR/awscli/awscli-bundle.zip"
    unzip "$CACHE_DIR/awscli/awscli-bundle.zip" -d "$CACHE_DIR/awscli"
fi
$CACHE_DIR/awscli/awscli-bundle/install -b ~/bin/aws
export PATH=~/bin:$PATH

### Vendor files into the build dir (which becomes /app at runtime)

cd "$BUILD_DIR"


### Install node/yarn

# create directory for installed utilities
mkdir -p .heroku/node
mkdir -p .heroku/yarn
# add to path
export PATH="$PATH:$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/yarn/bin"

puts_step 'install node & yarn'

curl --silent --retry 5 --retry-max-time 15 "https://nodejs.org/dist/v11.11.0/node-v11.11.0-linux-x64.tar.xz" -o /tmp/node.tar.xz
tar xf /tmp/node.tar.xz -C .heroku/node --strip 1

curl --silent --retry 5 --retry-max-time 15 -L "https://github.com/yarnpkg/yarn/releases/download/v1.15.0/yarn-v1.15.0.tar.gz" -o /tmp/yarn.tar.gz
tar zxf /tmp/yarn.tar.gz -C .heroku/yarn --strip 1

echo 'yarn version:' $(yarn --version)
echo 'node version:' $(node --version)

### Convert poetry.lock to requirements.txt for Heroku's Python buildpack
puts_step 'install node dependencies'
# Note: we install and convert the deps in a different dir from the project so
# that `yarn` doesn't try and version solve with the `package.json` and its
# dependencies.
poetry_convert_dir="$(mktemp -d)"
cp "${BUILD_DIR}/backend/poetry.lock" "${poetry_convert_dir}"
cp "${BP_DIR}/toml-to-requirements.js" "${poetry_convert_dir}"
pushd "${poetry_convert_dir}"
yarn add toml
node "toml-to-requirements.js" poetry.lock > "${BUILD_DIR}/requirements.txt"
popd
cat "${BUILD_DIR}/requirements.txt"
puts_step 'converted python requirements finished!'

### Configure NGINX
puts_step 'configure nginx'
mkdir -p "$BUILD_DIR/config"
cp "$BUILD_DIR/nginx/nginx.conf.erb" "$BUILD_DIR/config"

### Upload frontend static files to S3
if [[ -z "${S3_AH_BUILD_ARTIFACTS_BUCKET_NAME}" ]]; then
  fail "build artifacts s3 bucket name not set"
fi
if [[ -z "${S3_PUBLIC_ASSET_BUCKET_NAME}" ]]; then
  fail "public assets s3 bucket name not set"
fi
readonly frontend_asset_file="frontend.tar.gz"
readonly git_sha="${SOURCE_VERSION}"
readonly asset_path="s3://${S3_AH_BUILD_ARTIFACTS_BUCKET_NAME}/marshall/${git_sha}/frontend/${frontend_asset_file}"
puts_step 'checking for frontend build files in s3'
while [ ! "$(aws s3 ls $asset_path)" ]; do
    puts_step 'frontend build files not found, waiting 1 second'
    sleep 1
done
puts_step 'copying files from s3'
aws s3 cp "s3://${S3_AH_BUILD_ARTIFACTS_BUCKET_NAME}/marshall/${git_sha}/frontend/${frontend_asset_file}" "${frontend_asset_file}"
# We purposely leave the assets on the host for NGINX.
# NGINX looks on the host machine first and then checks S3 if a file isn't there.
# This handles people on older bundles. However, we don't store the
# `index.html` file in S3 as it determines which version the app is running.
readonly frontend_dir="${BUILD_DIR}/frontend/"
puts_step 'unarchiving frontend files'
tar xf "${frontend_asset_file}" -C "${frontend_dir}"
puts_step 'uploading files to s3'
aws s3 cp --recursive "${frontend_dir}/build/static" "s3://${S3_PUBLIC_ASSET_BUCKET_NAME}/frontend/static"

### Compile stuff
readonly end_time="$(date +%s)"

echo "ðŸŽ‰ Finished in $(( end_time - start_time ))s"
