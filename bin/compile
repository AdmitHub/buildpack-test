#!/usr/bin/env bash
# https://devcenter.heroku.com/articles/buildpack-api#bin-compile

# TODO: Use node buildpack and just make this super simple
### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)

### Load the standard lib

STDLIB_FILE=$(mktemp -t stdlib.XXXXX)
curl --silent --retry 5 --retry-max-time 15 'https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh' > "$STDLIB_FILE"
source "$STDLIB_FILE"

### Load env vars

export_env "$ENV_DIR"

### Vendor files into the build dir (which becomes /app at runtime)

cd "$BUILD_DIR"

### Install aws cli
puts_step 'install aws cli'
curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
unzip awscli-bundle.zip
./awscli-bundle/install -b ~/bin/aws
export PATH=~/bin:$PATH

### Install node/yarn

# create directory for installed utilities
mkdir -p .heroku/node
mkdir -p .heroku/yarn
# add to path
export PATH="$PATH:$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/yarn/bin"

puts_step 'install node & yarn'

curl --silent --retry 5 --retry-max-time 15 "https://nodejs.org/dist/v11.11.0/node-v11.11.0-linux-x64.tar.xz" -o /tmp/node.tar.xz
tar xf /tmp/node.tar.xz -C .heroku/node --strip 1

curl --silent --retry 5 --retry-max-time 15 -L "https://github.com/yarnpkg/yarn/releases/download/v1.15.0/yarn-v1.15.0.tar.gz" -o /tmp/yarn.tar.gz
tar zxf /tmp/yarn.tar.gz -C .heroku/yarn --strip 1

echo 'yarn version:' $(yarn --version)
echo 'node version:' $(node --version)

### Install node dependencies
cd "$BUILD_DIR/frontend"
puts_step 'install node dependencies'
yarn install --frozen-lockfile --non-interactive
# install toml for poetry conversion script
yarn add toml

### Convert poetry.lock to requirements.txt
puts_step 'convert python dependencies'
cp "$BP_DIR/toml-to-requirements.js" .

if [ -f $BUILD_DIR/backend/poetry.lock ]; then
  LOCKFILE=$BUILD_DIR/backend/poetry.lock
elif [ -f $BUILD_DIR/backend/pyproject.lock ]; then
  LOCKFILE=$BUILD_DIR/backend/pyproject.lock
else
  echo "Lockfile not found!" 1>&2
  exit 1
fi

node 'toml-to-requirements.js' "$LOCKFILE" > "$BUILD_DIR/requirements.txt"
puts_step 'converted python requirements'
cat "$BUILD_DIR/requirements.txt"

### Build webpack bundle
puts_step 'build webpack bundle'
yarn build

### Configure NGINX
puts_step 'configure nginx'
mkdir -p "$BUILD_DIR/config"
cp "$BUILD_DIR/nginx/nginx.conf.erb" "$BUILD_DIR/config"

### Upload frontend static files to S3
puts_step 'upload static files to s3'
aws s3 cp --recursive $BUILD_DIR/frontend/build "s3://$S3_PUBLIC_ASSET_BUCKET_NAME/frontend"

### Compile stuff

echo "ðŸŽ‰  Finished!"
